{"version":3,"file":"react-native-webview-bus.js","sources":["../src/WebviewBus.js"],"sourcesContent":["import mitt from 'mitt'\n\n/**\n * WebviewBus 类\n */\nclass WebviewBus {\n  /**\n   * 构造函数\n   * @param  {Object} host 宿主（window 或 webview 实例）\n   */\n  constructor (host = window, env) {\n    // 宿主（window 或 webview 实例）\n    this.host = host\n    // 环境\n    this.env = (env === 'native' || !!this.host.injectJavaScript) ? 'native' : 'web'\n    // 事件总线\n    this.bus = mitt()\n\n    this.messageCache = {}\n\n    // 初始化绑定相关事件\n    this._bindEvents()\n  }\n\n  /**\n   * 绑定相关事件\n   */\n  _bindEvents () {\n    // 判断当前宿主是否为 native 环境\n    if (this.env === 'native') {\n      // 如果为 native 环境，则代理 _onMessage 事件处理方法\n      this.host.onMessage = this.host._onMessage = (e) => {\n        // 处理事件消息\n        this.proccessMessage(e.nativeEvent.data)\n        // 处理 props 绑定的消息\n        const {onMessage} = this.host.props\n        onMessage && onMessage(e)\n      }\n    } else {\n      // 如果为 web 环境，则监听 document.onmessage 事件\n      document.addEventListener('message', (e) => {\n        this.proccessMessage(e.data)\n      })\n    }\n  }\n\n  /**\n   * 添加事件监听器\n   * @param  {String} event   事件名称（支持通配符 * 监听所有事件）\n   * @param  {Function} handler 事件处理器\n   */\n  on (event, handler) {\n    this.bus.on(event, handler)\n  }\n\n  /**\n   * 添加单次事件监听器\n   * @param  {String} event   事件名称（支持通配符 * 监听所有事件）\n   * @param  {Function} handler 事件处理器\n   */\n  once (event, handler) {\n    let callback = (evt, data) => {\n      handler && handler(evt, data)\n      this.bus.off(event, callback)\n    }\n    this.bus.on(event, callback)\n  }\n\n  /**\n   * 触发事件\n   * @param  {String} event   事件名称（支持通配符 * 监听所有事件）\n   * @param  {Object} data    要传递的数据\n   */\n  emit (event, data) {\n    try {\n      let msg = JSON.stringify({\n        event: event,\n        data: data,\n        _env: this.env\n      })\n\n      let chunkSize = 5000\n      let page = Math.ceil(msg.length / chunkSize)\n      if (page < 1) {\n        // 单次发送\n        this.host.postMessage(msg, '*')\n      } else {\n        // 分批次发送\n        let id = Math.random().toString(32).replace('0.', '')\n        for (let i = 0; i < page; i++) {\n          this.host.postMessage(JSON.stringify({\n            id: id,\n            event: event,\n            chunk: msg.substr(i * chunkSize, chunkSize),\n            end: (i + 1) === page,\n            _env: this.env\n          }), '*')\n        }\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  /**\n   * 处理消息\n   * @param  {String} message 消息内容\n   */\n  proccessMessage (message) {\n    if (!message) return\n    try {\n      // 转换消息内容\n      let msg = JSON.parse(message)\n      // 排除非正常的 message\n      if (!msg._env || msg._env === this.env) return\n\n      // 判断是否为分批消息\n      if (msg.chunk) {\n        // 保存到消息缓存\n        this.messageCache[msg.id] = this.messageCache[msg.id] || ''\n        this.messageCache[msg.id] += msg.chunk\n        // 判断是否未结束\n        if (msg.end) {\n          // 转换完整消息内容\n          let msgBody = JSON.parse(this.messageCache[msg.id])\n          // 触发事件\n          this.bus.emit(msgBody.event, msgBody.data)\n          // 清理缓存\n          delete this.messageCache[msg.id]\n        }\n      } else {\n        // 触发事件\n        this.bus.emit(msg.event, msg.data)\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n}\n\nexport default WebviewBus\n"],"names":["WebviewBus","host","window","env","injectJavaScript","bus","mitt","messageCache","_bindEvents","onMessage","_onMessage","e","proccessMessage","nativeEvent","data","props","addEventListener","event","handler","on","callback","evt","off","msg","chunkSize","page","Math","ceil","length","postMessage","id","random","toString","replace","i","substr","err","log","message","JSON","parse","_env","chunk","end","msgBody","emit"],"mappings":"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"}