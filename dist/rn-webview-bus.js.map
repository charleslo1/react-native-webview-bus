{"version":3,"file":"rn-webview-bus.js","sources":["../src/WebviewBus.js"],"sourcesContent":["import mitt from 'mitt'\n\n/**\n * WebviewBus 类\n */\nclass WebviewBus {\n  /**\n   * 构造函数\n   * @param  {Object} host 宿主（window 或 webview 实例）\n   */\n  constructor (host = window) {\n    // 宿主（window 或 webview 实例）\n    this.host = host\n    // 是否为 native 环境\n    this.isNative = !!this.host.injectJavaScript\n    // 事件总线\n    this.bus = mitt()\n\n    // 初始化绑定相关事件\n    this._bindEvents()\n  }\n\n  /**\n   * 绑定相关事件\n   */\n  _bindEvents () {\n    // 判断当前宿主是否为 native 环境\n    if (this.isNative) {\n      // 如果为 native 环境，则代理 _onMessage 事件处理方法\n      this.host._onMessage = (e) => {\n        // 处理事件消息\n        this.proccessMessage(e.nativeEvent.data)\n        // 处理 props 绑定的消息\n        const {onMessage} = this.host.props\n        onMessage && onMessage(e)\n      }\n    } else {\n      // 如果为 web 环境，则监听 document.onmessage 事件\n      document.addEventListener('message', function (e) {\n        this.proccessMessage(e.data)\n      })\n    }\n  }\n\n  /**\n   * 添加事件监听器\n   * @param  {String} event   事件名称（支持通配符 * 监听所有事件）\n   * @param  {Function} handler 事件处理器\n   */\n  on (event, handler) {\n    this.bus.on(event, handler)\n  }\n\n  /**\n   * 添加单次事件监听器\n   * @param  {String} event   事件名称（支持通配符 * 监听所有事件）\n   * @param  {Function} handler 事件处理器\n   */\n  once (event, handler) {\n    let callback = (evt, data) => {\n      handler && handler(evt, data)\n      this.bus.off(event, callback)\n    }\n    this.bus.on(event, callback)\n  }\n\n  /**\n   * 触发事件\n   * @param  {String} event   事件名称（支持通配符 * 监听所有事件）\n   * @param  {Object} data    要传递的数据\n   */\n  emit (event, data) {\n    try {\n      let msg = JSON.stringify({\n        event: event,\n        data: data\n      })\n      this.host.postMessage(msg, '*')\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  /**\n   * 处理消息\n   * @param  {String} message 消息内容\n   */\n  proccessMessage (message) {\n    if (!message) return\n    try {\n      // 类型转换\n      let msg = JSON.parse(message)\n      // 触发事件\n      this.bus.emit(msg.event, msg.data)\n    } catch (err) {\n      console.log(err)\n    }\n  }\n}\n\nexport default WebviewBus\n"],"names":["WebviewBus","host","window","isNative","injectJavaScript","bus","mitt","_bindEvents","_onMessage","e","proccessMessage","nativeEvent","data","onMessage","props","addEventListener","event","handler","on","callback","evt","off","msg","postMessage","err","log","message","JSON","parse","emit"],"mappings":";;;;;;;;;;;AAEA;;;;IAGMA;;;;;wBAKwB;QAAfC,IAAe,uEAARC,MAAQ;;;;;SAErBD,IAAL,GAAYA,IAAZ;;SAEKE,QAAL,GAAgB,CAAC,CAAC,KAAKF,IAAL,CAAUG,gBAA5B;;SAEKC,GAAL,GAAWC,MAAX;;;SAGKC,WAAL;;;;;;;;;;kCAMa;;;;UAET,KAAKJ,QAAT,EAAmB;;aAEZF,IAAL,CAAUO,UAAV,GAAuB,UAACC,CAAD,EAAO;;gBAEvBC,eAAL,CAAqBD,EAAEE,WAAF,CAAcC,IAAnC;;cAEOC,SAJqB,GAIR,MAAKZ,IAAL,CAAUa,KAJF,CAIrBD,SAJqB;;uBAKfA,UAAUJ,CAAV,CAAb;SALF;OAFF,MASO;;iBAEIM,gBAAT,CAA0B,SAA1B,EAAqC,UAAUN,CAAV,EAAa;eAC3CC,eAAL,CAAqBD,EAAEG,IAAvB;SADF;;;;;;;;;;;;uBAWAI,OAAOC,SAAS;WACbZ,GAAL,CAASa,EAAT,CAAYF,KAAZ,EAAmBC,OAAnB;;;;;;;;;;;yBAQID,OAAOC,SAAS;;;UAChBE,WAAW,SAAXA,QAAW,CAACC,GAAD,EAAMR,IAAN,EAAe;mBACjBK,QAAQG,GAAR,EAAaR,IAAb,CAAX;eACKP,GAAL,CAASgB,GAAT,CAAaL,KAAb,EAAoBG,QAApB;OAFF;WAIKd,GAAL,CAASa,EAAT,CAAYF,KAAZ,EAAmBG,QAAnB;;;;;;;;;;;yBAQIH,OAAOJ,MAAM;UACb;YACEU,MAAM,gBAAe;iBAChBN,KADgB;gBAEjBJ;SAFE,CAAV;aAIKX,IAAL,CAAUsB,WAAV,CAAsBD,GAAtB,EAA2B,GAA3B;OALF,CAME,OAAOE,GAAP,EAAY;gBACJC,GAAR,CAAYD,GAAZ;;;;;;;;;;;oCAQaE,SAAS;UACpB,CAACA,OAAL,EAAc;UACV;;YAEEJ,MAAMK,KAAKC,KAAL,CAAWF,OAAX,CAAV;;aAEKrB,GAAL,CAASwB,IAAT,CAAcP,IAAIN,KAAlB,EAAyBM,IAAIV,IAA7B;OAJF,CAKE,OAAOY,GAAP,EAAY;gBACJC,GAAR,CAAYD,GAAZ;;;;;;;;;;;;;;"}